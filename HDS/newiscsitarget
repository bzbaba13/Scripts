#!/bin/bash

# This script creates iSCSI Target and LUNs/LDEVs
# on HDS storage systems via RAIDCOM utility provided by HDS.
#

#$Id: newfilesystem 9792 2016-08-11 21:53:12Z fma $

PATH=/bin:/usr/bin:/HORCM

retval=9
read_reply='n'
network_type='no_network_type'
msg=''
wc1_instance='55'
ev1_instance='77'
host_grp_name=''
iscsi_ports=''
iscsi_target_prefix_wc1='iqn.1989-04.com.hitachi:hds.hm800.440727.'
iscsi_target_prefix_ev1='iqn.1989-04.com.hitachi:hds.hm800.440861.'
np_ports='cl3-a cl4-a'
prod_routed_ports='cl1-b cl2-b'
prod_notrouted_ports='cl1-a cl2-a'


# functions
determine_ports ()
{
   case $connectivity in
   non-prod)
      iscsi_ports=$np_ports
      ;;
   prod-routed)
      iscsi_ports=$prod_routed_ports
      ;;
   prod-notrouted)
      iscsi_ports=$prod_notrouted_ports
      ;;
   *)
      echo -e "\nCRITICAL: Invalid connectivity '${connectivity}' specified."
      show_help
      exit 1
      ;;
   esac
}

determine_datacenter ()
{
   case $datacenter in
   wc1)
      horcm_instance=$wc1_instance
      ;;
   ev1)
      horcm_instance=$ev1_instance
      ;;
   *)
      echo -e "\nCRITICAL: Invalid data center of '${datacenter}' specified."
      show_help
      exit 1
      ;;
   esac
}

fetch_iscsi_initiators ()
{
   echo -e "\nPlease provide the iSCSI Initiator ID (space separated) of all host server system(s)."
   read -a initiators
}

fetch_host_grp_name ()
{
   read -p 'Please provide the name of the host group/cluster: ' host_grp_name
}

fetch_lun_prefix ()
{
   echo -e "\nPlease provide the prefix for the LUN(s), e.g., hostname of the host server system(s)."
   read lun_prefix
}

display_results ()
{
   echo -e "\nSummary\n~~~~~~~~~~~~~"
   echo -e "Ports and Host Group/Cluster\n~~~~~~~~"
   raidcom get host_grp -allports -IH"$horcm_instance" 2>&1 | 
sed -n -e '1 p' -e "/${host_grp_name}/ p"

   echo -e "\nPort, Host Group/Cluster, iSCSI Target ID, & Host Mode Options\n~~~~~~~~"
   for port in $iscsi_ports ; do
      raidcom get host_grp -port $port $host_grp_name -IH"$horcm_instance" 2>&1 | 
sed -n -e '1 p' -e "/${host_grp_name}/ p"

   done

   echo -e "\nPort, Host Group/Cluster, & iSCSI Initiator ID\n~~~~~~~~"
   for port in $iscsi_ports ; do
      raidcom get hba_iscsi -port $port $host_grp_name -IH"$horcm_instance" 2>&1
   done

   echo -e "\nLUN(s)\n~~~~~~~~"
   for port in $iscsi_p;orts ; do
      msg=$(raidcom get lun -port $port $host_grp_name -IH"$horcm_instance" 2>&1)
      echo "$msg"
   done

   echo -e "\nLUN(s)/LDEV(s) Detail\n~~~~~~~~"
   lun_cnt=$(echo "$msg" | grep -v PORT | wc -l)
   1st_ldev_id=$(echo "$msg" | grep -v PORT | head -1 | awk '{ print $6 }')
   raidcom get ldev -ldev_id $1st_ldev_id -cnt $lun_cnt -IH"$horcm_instance" 2>&1 | 
grep -A 11 'Serial#'
}

show_help ()
{
   echo "${0} -c {conectivity} -d {datacenter}"
   echo
   echo "where:"
   echo -e "\t-c\tconnectivity is either: non-prod | prod-routed | prod-notrouted"
   echo -e "\t-d\tdatacenter is either: wc1 | ev1"
   echo
}


# parse options
while getopts ":d:hp:" opt ; do
   case $opt in
      h)
         show_help
         exit 2
         ;;
      c)
         connectivity=$opt
         ;;
      d)
         datacenter=$opt
         ;;
      \?)
         echo "Invalid option: -${OPTARG}" >&2
         show_help
         exit 1
         ;;
      :)
         echo "Option -$OPTARG requires an argument." >&2
         show_help
         exit 1
         ;;
      *)
         show_help
         exit 2
         ;;
   esac
done


# main logic
determine_ports
fetch_iscsi_initiators
if [[ ${#initiators[*]} -eq 0 ]] ; then
   echo -e "\nCRITICAL: No iSCSI Initiator ID(s) has/have been provided.  Please try again."
   fetech_iscsi_initiators
   if [[ ${#initiators[*]} -eq 0 ]] ; then
      echo -e"\nCRITICAL: Still no iSCSI Initiator ID(s) provided.  Aborting."
      exit 1
   fi
fi
fetch_host_grp_name
if [[ x$host_grp_name == x ]] ; then
   echo -e "\nCRITICAL: No host group/cluster name has been provide.  Please try again."
   fetch_host_grp_name
   if [[ x$host_grp_name == x ]] ; then
      echo -e "\nStill no host group/cluster name provided.  Aborting."
      exit 1
   fi
fi
fetch_lun_prefix
if [[ x$lun_prefix == x ]] ; then
   echo -e "\nCRITIAL: No LUN prefix has been provided.  Please try again."
   fetch_lun_prefix
   if [[ x$lun_prefix == x ]] ; then
      echo -e "\nStill no LUN prefix has been provided.  Aborting."
      exit 1
   fi
fi
fetch_luns
fetch_capacities
create_host_grp
add_initiators
create_luns
add_luns_to_host_grp
display_results

