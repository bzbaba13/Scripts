#!/bin/bash

# == Synopsis
#
# This script sets/modifies nfs-export entry on HDS NAS storage systems via
# SSC utility provided by HDS.
#
#
# == Author
# Friendly half-blind Lead Storage/Systems Administrator with smiles
#

PATH=/bin:/usr/bin

retval=9
evs_name='no_evs'
evs_id=99
SSC_BIN=<path>/ssc
HASH_FILE=~/.hash_file_4_evs
hnas_node='no_hnas_node'
node_id='no_node_id'
adm_node='no_adm_node'
opsdb_err='no_opsdb_err'
EVS_LIST_ERR='evs list: Could not find the specified EVS'
read_reply='n'
cluster_type='no_cluster_type'
msg=''
span_name='no_name'
nfs_clients=''
verbose='n'
read_reply='n'
declare -A existing_nfs_client_array
declare -A new_nfs_client_array
add_flag='n'
del_flag='n'
bad_nfs_client=''


# functions
identify_admin_node ()
{
   case $hnas_node in
      irv4100)
         adm_node='irv4100-adminevs.site.domain'
         ;;
      irv4060)
         adm_node='irv4060-adminevs.site.domain'
         ;;
      ash4060)
         adm_node='ash4060-adminevs.site.domain'
         ;;
      ash4060np)
         adm_node='ash4060np-adminevs.site.domain'
         ;;
      *)
         echo -e "CRITICAL: HNAS node is not on the list of available HNAS nodes."
         show_help
         exit 1
         ;;
   esac
   [[ $verbose == 'y' ]] && echo -e "\tadm_node: ${adm_node}\n"
}

request_fs_name ()
{
   fs_name=''
   echo ''
   read -p "Please provide file system name followed by <Enter>: " fs_name
   [[ $verbose == 'y' ]] && echo -e "\tfs_name: ${fs_name}\n"
}

check_fs_name ()
{
   retval=9
   msg=$( $SSC_BIN -u storageadmin -E "$HASH_FILE" "$adm_node" \
"filesystem-list ${fs_name}" 2>&1 )
   retval=$?
   [[ $verbose == 'y' ]] && echo -e "\tcheck_fs_name retval: ${retval}\n"
}

obtain_export_list ()
{
   retval=9
   msg=$( $SSC_BIN -u storageadmin -E "$HASH_FILE" "$adm_node" \
"vn ${evs_id} nfs-export list" 2>&1 )
   retval=$?
   [[ $verbose == 'y' ]] && echo -e "\tobtain_export_list retval: ${retval}\n"
}

identify_export_name ()
{
   echo -e "\nBelow is a list of all export name entries related to ${fs_name}:"
   for i in $(echo ${export_list}) ; do
      echo -e "\t${i}"
   done
   echo -e "\nPlease provide the desired export name entry to be modified"
   read -p "  followed by <Enter>: " export_name
}

obtain_nfs_export ()
{
   retval=9
   msg=$( $SSC_BIN -u storageadmin -E "$HASH_FILE" "$adm_node" \
"vn ${evs_id} nfs-export list ${export_name}" 2>&1 )
   retval=$?
   [[ $verbose == 'y' ]] && echo -e "\tobtain_nfs_export retval: ${retval}\n"
}

retain_existing_nfs_client ()
{
   entries=$( echo "$msg" | awk -F',' '/squash/ { print $1 }' )
   for e in $entries ; do
      client=$( echo $e | awk -F'(' '{ print $1 }' )
      access=$( echo $e | awk -F'(' '{ print $2 }' )
      existing_nfs_client_array[$client]=$access
   done
   if [[ $verbose == 'y' ]] ; then
      echo -e "\texisting_nfs_client_array:"
      for e in ${!existing_nfs_client_array[*]} ; do
         echo -e "\t\t\t${e}: ${existing_nfs_client_array[$e]}"
      done
      echo ''
   fi
}

fetch_nfs_client_removal ()
{
   read_reply='n'
   echo ''
   read -p "Would you like to remove any of the existing NFS client(s) (y|N)? " read_reply
   if [[ $( echo "$read_reply" | tr [:upper:] [:lower] ) == 'y' && $? -lt 129 ]] ; then
      echo "Please provide the NFS client(s) to be removed (separated by space)"
      echo "based on the existing NFS client list above."
      read -a nfs_client_del_array
   fi
   if [[ $verbose == 'y' ]] ; then
      echo -e "\tnfs_client_del_array:"
      i=0
      while [[ $i -lt ${#nfs_client_del_array[*]} ]] ; do
         echo -e "\t\t\t${nfs_client_del_array[$i]}"
         ((i++))
      done
      echo ''
   fi
   if [[ x${nfs_client_del_array[0]} == 'x' ]] ; then
      echo -e "\tNo removal specified.  Skpping removal."
      del_flag='n'
   else
      del_flag='y'
   fi
}

fetch_nfs_client_addition ()
{
   read_reply='n'
   echo ''
   read -p "Would you like to add new or change existing NFS client(s) (y|N)? " read_reply
   if [[ $( echo "$read_reply" | tr [:upper:] [:lower] ) == 'y' && $? -lt 129 ]] ; then
      echo -e "\nPlease provide IP address (first if exist) and/or FQDN of the \c"
      echo "NFS client(s) and access mode separated by colon (:)"
      echo "Separated each set by space, e.g., <ip_addr1>:rw myhost2.mydomain:ro"
      read -a nfs_client_add_array
   fi
   if [[ $verbose == 'y' ]] ; then
      echo -e "\tnfs_client_add_array:"
      i=0
      while [[ $i -lt ${#nfs_client_add_array[*]} ]] ; do
         echo -e "\t\t\t${nfs_client_add_array[$i]}"
         ((i++))
      done
      echo ''
   fi
   if [[ x${nfs_client_add_array[0]} == 'x' ]] ; then
      echo -e "\tNo addition specified.  Skipping addition."
      add_flag='n'
   else
      add_flag='y'
   fi
}

display_requested_changes ()
{
   echo -e "\nThe following changes were requested:"
   if [[ $del_flag == 'y' ]] ; then
      echo -e "\tDeletion(s):"
      i=0
      while [[ $i -lt ${#nfs_client_del_array[*]} ]] ; do
         echo -e "\t\t${nfs_client_del_array[$i]}"
         ((i++))
      done
   else
      echo -e "\t\tNo deletion(s) specified."
   fi
   echo ''
   echo -e "\tAddition(s)/Modification(s):"
   if [[ $add_flag == 'y' ]] ; then
      i=0
      while [[ $i -lt ${#nfs_client_add_array[*]} ]] ; do
         echo -e "\t\t${nfs_client_add_array[$i]}"
         ((i++))
      done
   else
      echo -e "\t\tNo deletion(s) specified."
   fi
}

build_new_nfs_client_array ()
{
   # remove entry/ies from existing_nfs_client_array
   if [[ $del_flag == 'y' ]] ; then
      i=0
      [[ $verbose == 'y' ]] && echo -e "\tsize of nfs_client_del_array: ${#nfs_client_del_array[*]}"
      while [[ $i -lt ${#nfs_client_del_array[*]} ]] ; do
         d=${nfs_client_del_array[$i]}
         [[ $verbose == 'y' ]] && echo -e "\tnfs_client_del_array element: ${d}"
         for e in ${!existing_nfs_client_array[*]} ; do
            if [[ $verbose == 'y' ]] ; then
               echo -e "\texisting_nfs_client_array key: ${e}"
            fi
            if [[ $d == $e ]] ; then
               unset existing_nfs_client_array[$e]
               [[ $verbose == 'y' ]] && echo -e "\tremoved ${d}"
            fi
         done
         ((i++))
      done
   fi
   # populate new_nfs_client_array with existing_nfs_client_array
   for e in ${!existing_nfs_client_array[*]} ; do
      new_nfs_client_array[$e]=${existing_nfs_client_array[$e]}
   done
   [[ $verbose == 'y' ]] && echo -e "\tnew_nfs_client_array size: ${#new_nfs_client_array[*]}"
   if [[ $add_flag == 'y' ]] ; then
      i=0
      while [[ $i -lt ${#nfs_client_add_array[*]} ]] ; do
         if [[ $verbose == 'y' ]] ; then
            echo -e "\tAdding ${nfs_client_add_array[$i]}..."
         fi
         client=$( echo ${nfs_client_add_array[$i]} | awk -F':' '{ print $1 }' )
         access=$( echo ${nfs_client_add_array[$i]} | awk -F':' '{ print $2 }' )
         if [[ x$client != 'x' && x$access != 'x' ]] && \
[[ $access == 'ro' || $access == 'rw' ]] ; then
            new_nfs_client_array[$client]=$access
         else
            bad_nfs_client="${bad_nfs_client} ${nfs_client_add_array[$i]}"
         fi
         ((i++))
      done
   fi
}

display_bad_nfs_client ()
{
   if [[ x$bad_nfs_client != 'x' ]] ; then
      echo -e "\nSome of the provided NFS client entry/ies is/are rejected:"
      for i in $bad_nfs_client ; do
         echo -e "\t$i"
      done
      echo ''
   fi
}

setup_access_configuration ()
{
   for c in ${!new_nfs_client_array[*]} ; do
      nfs_clients="${nfs_clients},${c}(${new_nfs_client_array[$c]},sec=sys,norootsquash)"
   done
   nfs_clients=$( echo "$nfs_clients" | sed 's/^,//' )
}

show_help ()
{
   echo "${0} -n {HNAS node} [-v]"
   echo
   echo "where:"
   echo -e "\t-n\tHNAS node in:"
   echo -e "\t\t  Irvine, CA"
   echo -e "\t\t\tirv4060 (non-prod)"
   echo -e "\t\t\tirv4100 (prod)"
   echo -e "\t\t  Ashburn, VA"
   echo -e "\t\t\tash4060np (non-prod)"
   echo -e "\t\t\tash4060 (prod)"
   echo -e "\t-v\tverbose"
   echo
}


# parse options
while getopts ":hn:v" opt ; do
   case $opt in
      h)
         show_help
         exit 2
         ;;
      n)
         hnas_node="$OPTARG"
         ;;
      v)
         verbose='y'
         ;;
      \?)
         echo "Invalid option: -${OPTARG}" >&2
         show_help
         exit 1
         ;;
      :)
         echo "Option -$OPTARG requires an argument." >&2
         show_help
         exit 1
         ;;
      *)
         show_help
         exit 2
         ;;
   esac
done


# main logic
if [[ -r $HASH_FILE && -x $SSC_BIN && $hnas_node != 'no_hnas_node' ]] ; then
   identify_admin_node
   request_fs_name
   if [[ x$fs_name == x ]] ; then
      echo -e "\nNo file system name was entered.  Please try again."
      request_fs_name
      if [[ x$fs_name == x ]] ; then
         echo -e "\nStill no file system name was entered.  Aborting.\n"
         exit 1
      fi
   fi

   check_fs_name
   if [[ $retval != 0 ]] ; then
      echo -e "\nEntered file system name '${fs_name}' is not found.  Please try again."
      request_fs_name
      check_fs_name
      if [[ $retval != 0 ]] ; then
         echo -e "\nEntered file system name of '${fs_name}' is still not found.  Aborting.\n"
         exit 1
      fi
   fi
   evs_id=$( echo "$msg" | grep 'Mount' | awk '{ print $5 }' )
   if [[ x$evs_id == x ]] ; then
      echo -e "\nCRITICAL: Failed to figure out evs_id from output of filesystem-list."
      exit 1
   fi

   obtain_export_list
   if [[ $retval == 0 ]] ; then
      export_list=$( echo "$msg" | grep 'Export\ name' | grep "$fs_name" | awk '{ print $NF }' )
      identify_export_name
      if [[ x$export_name == x ]] ; then
         echo -e "\nNo export name was entered.  Please try again."
         identify_export_name
         if [[ x$export_name == x ]] ; then
            echo -e "\nStill no export name was entered.  Aborting."
            exit 1
         fi
      fi
   else
      echo -e "\nCRITICAL: Failed to obtain nfs-export data of EVS #${evs_id}."
      echo -e "${msg}\n"
      exit 1
   fi

   obtain_nfs_export
   if [[ $retval == 0 ]] ; then
      echo -e "\n${export_name} currently allows access from following NFS clients"
      echo "$msg" | sed -n '/Export\ configuration/,+999 p'
      retain_existing_nfs_client
      fetch_nfs_client_removal
      fetch_nfs_client_addition
      if [[ $add_flag != 'n' || $del_flag != 'n' ]] ; then
         display_requested_changes
         read_reply='n'
         echo ''
         read -p "Do you want to proceed (y/N)? " read_reply
         if [[ $(echo "$read_reply" | tr [:upper:] [:lower]) == 'y' && $? -lt 129 ]] ; then
            build_new_nfs_client_array
            display_bad_nfs_client
            setup_access_configuration
            $SSC_BIN -u storageadmin -E "$HASH_FILE" "$adm_node" \
"vn ${evs_id} nfs-export mod -d -c ${nfs_clients} ${export_name}" 2>&1
            if [[ $? == 0 ]] ; then
               obtain_nfs_export
               echo -e "\nBelow is the new export configuration of ${export_name}:"
               echo -e "$msg\n"
            else
               echo -e "\nCRITICAL: Modification of nfs-export failed.\n"
            fi
         fi
      else
         echo -e "Neither addition(s) nor removal(s) requested.  Goodbye."
         exit 2
      fi
   else
      echo -e "\nCRITICAL: Failed to obtain nfs-export data of ${export_name}."
      echo -e "${msg}\n"
      exit 1
   fi
else
   echo -e "\nCRITICAL: Either ${HASH_FILE}, ${SSC_BIN}, or {HNAS node} is not available."
   show_help
   exit 1
fi
